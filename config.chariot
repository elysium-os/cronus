@import ports.chariot

// Support
source/support {
    url: support
    type: local
}

// mkimg
source/mkimg {
    url: https://github.com/imwux/mkimg
    commit: 3ee31fc7dd370fb68a9da52e271ef78a97de5012
    type: git
}

host/mkimg {
    source: mkimg
    dependencies [ image/go ]
    configure { cp @(source_dir)/go.mod @(source_dir)/go.sum @(source_dir)/main.go . }
    build { go build }
    install {
        install -d @(install_dir)@(prefix)/bin
        install mkimg @(install_dir)@(prefix)/bin
    }
}

// rdsk
source/rdsk {
    url: tools/rdsk
    type: local
}

host/rdsk {
    source: rdsk
    dependencies [ image/clang ]
    build { clang @(source_dir)/rdsk.c -o rdsk }
    install {
        install -d @(install_dir)@(prefix)/bin
        install rdsk @(install_dir)@(prefix)/bin
    }
}

// ksym
source/ksym {
    url: tools/ksym
    type: local
}

host/ksym {
    source: ksym
    dependencies [ image/clang ]
    build { clang @(source_dir)/ksym.c -o ksym }
    install {
        install -d @(install_dir)@(prefix)/bin
        install ksym @(install_dir)@(prefix)/bin
    }
}

target/ksym {
    source: ksym
    install {
        install -d @(install_dir)@(prefix)/include
        install @(source_dir)/ksym.h @(install_dir)@(prefix)/include
    }
}

// Tartarus (Bootloader)
source/tartarus {
    url: https://github.com/imwux/tartarus-bootloader.git
    commit: b26e9095468e247e8be5efd737dcffeea63cf0a5
    type: git
}

source/vendor_libgcc {
    url: https://github.com/osdev0/libgcc-binaries/archive/6f547f8a77bd569dc7f9a49e979abd85e5d6a8ae.tar.gz
    b2sum: e9e3a9b2af38b9d8189237f43b0649aa663b48f05728346f08c9997d19c2a458e3e61f96f9adee7e896a58c0f40fe2684c8f1d885d9bbc2380775a4005fafcbb
    type: tar.gz
}

source/vendor_nyu-efi {
    url: https://github.com/osdev0/nyu-efi/archive/eede601b8a9134cb4b6de96d2c430e2424c1390c.tar.gz
    b2sum: 26b841f4af5c0404a7a9976f7f42870ac3ef695e1c77da8f555feee93fe9f5be3cebd3d1f6cf2d5bef9ba198e41cfbc7883f2e23b4ec09b7165adf8c15b6b821
    type: tar.gz
}

target/tartarus {
    source: tartarus
    dependencies [ source/vendor_libgcc image/git image/nasm image/llvm image/clang image/lld ]
    configure {
        @(source_dir)/conf.sh \
            --prefix=@(prefix) \
            --platform=x86_64-bios \
            --toolchain-compiler=clang \
            --toolchain-linker=ld.lld \
            --toolchain-objcopy=llvm-objcopy \
            --vendor-libgcc=@(sources_dir)/vendor_libgcc
    }
    build { make -j@(thread_count) all }
    install { DESTDIR=@(install_dir) make install }
}

target/tartarus_efi {
    source: tartarus
    dependencies [ source/vendor_libgcc source/vendor_nyu-efi image/git image/nasm image/llvm image/clang image/lld ]
    configure {
        @(source_dir)/conf.sh \
            --prefix=@(prefix) \
            --platform=x86_64-uefi \
            --toolchain-compiler=clang \
            --toolchain-linker=ld.lld \
            --toolchain-objcopy=llvm-objcopy \
            --vendor-libgcc=@(sources_dir)/vendor_libgcc \
            --vendor-efi=@(sources_dir)/vendor_nyu-efi
    }
    build { make -j@(thread_count) all }
    install { DESTDIR=@(install_dir) make install }
}

// uACPI
source/uacpi {
    url: https://github.com/UltraOS/uACPI/archive/1bd2930030ef819519de32dd1f7a8f999440308f.tar.gz
    b2sum: 0c972ce71ba510dfa2f443492cf8fcada9bb0c1bddf97d113536939243184b94543dab86b47dafac5cb7bac73a2a9d18ead3a6c9bf4f09876eea36670e90216c
    type: tar.gz
}

target/uacpi {
    source: uacpi
    dependencies [ image/llvm image/clang ]
    build {
        clang \
            -ffreestanding \
            -mcmodel=kernel \
            -mno-red-zone \
            -mgeneral-regs-only \
            -fno-stack-protector \
            -fno-stack-check \
            -fno-strict-aliasing \
            -O3 \
            -DUACPI_NATIVE_ALLOC_ZEROED -DUACPI_FORMATTED_LOGGING -DUACPI_SIZED_FREES \
            -I@(source_dir)/include \
            -c $(find @(source_dir)/source -type f -name "*.c")
        llvm-ar cr uacpi.a $(find . -type f -name "*.o")
    }
    install {
        mkdir -p @(install_dir)@(prefix)/share
        mkdir -p @(install_dir)@(prefix)/include
        cp uacpi.a @(install_dir)@(prefix)/share
        cp -r @(source_dir)/include/* @(install_dir)@(prefix)/include
    }
}

// freestanding headers
source/freestanding_headers {
    url: https://github.com/osdev0/freestnd-c-hdrs-0bsd
    commit: a87c192f3eb66b0806740dc67325f9ad23fc2d0b
    type: git
}

// kernel
source/kernel {
    url: kernel
    type: local
}

target/kernel {
    source: kernel
    dependencies [ source/freestanding_headers target/ksym target/tartarus target/uacpi target/mlibc_headers image/nasm image/clang image/lld image/meson ]
    configure {
        CC=clang CC_LD=lld meson setup \
            --prefix=@(prefix) \
            --buildtype=@(build_type) \
            -Dfreestanding_headers=@(sources_dir)/freestanding_headers \
            -Dexternal_headers=@(sysroot_dir)@(prefix)/include \
            -Duacpi_path=@(sysroot_dir)@(prefix)/share/uacpi.a \
            @(source_dir)
    }
    build { ninja -j@(thread_count) }
    install { DESTDIR=@(install_dir) ninja install }
}

// init
source/init {
    url: init
    type: local
}

target/init {
    source: init
    dependencies [ host/gcc target/mlibc_headers ]
    build {
        cp -r @(source_dir)/* .
        make init
    }
    install {
        install -d @(install_dir)@(prefix)/bin
        install init @(install_dir)@(prefix)/bin
    }
}

// image
target/root {
    dependencies [ host/rdsk target/mlibc_headers target/init ]
    build {
        mkdir ./root_directory
        cp -r @(sysroot_dir)/* ./root_directory
        mkdir ./root_directory/modules
        mkdir ./root_directory/tmp

        rdsk -c ./root_directory -o root.rdk
    }
    install {
        install -d @(install_dir)@(prefix)/share
        install root.rdk @(install_dir)@(prefix)/share
    }
}

target/image {
    dependencies [ host/mkimg host/ksym source/support target/tartarus target/tartarus_efi target/kernel target/root image/llvm image/qemu-img ]
    build {
        cp @(sysroot_dir)@(prefix)/share/tartarus/tartarus.sys .
        cp @(sysroot_dir)@(prefix)/share/tartarus/x86_64-bios.bin .

        mkdir ./image_root
        cp @(sources_dir)/support/tartarus.cfg ./image_root
        cp @(sysroot_dir)@(prefix)/share/root.rdk ./image_root
        cp @(sysroot_dir)@(prefix)/bin/kernel.elf ./image_root
        llvm-nm -S @(sysroot_dir)@(prefix)/bin/kernel.elf -n > ./kernel_symbols.txt
        ksym ./kernel_symbols.txt ./image_root/kernel.ksym

        mkimg --config=@(sources_dir)/support/mkimg_bios.toml

        mkdir -p ./image_root/EFI/BOOT
        cp @(sysroot_dir)@(prefix)/share/tartarus/tartarus.efi ./image_root/EFI/BOOT/BOOTX64.EFI
        mkimg --config=@(sources_dir)/support/mkimg_efi.toml

        qemu-img convert -O vmdk elysium_efi.img elysium_efi.vmdk
        qemu-img convert -O vmdk elysium_bios.img elysium_bios.vmdk
    }
    install {
        cp elysium_bios.img @(install_dir)
        cp elysium_efi.img @(install_dir)
        cp elysium_bios.vmdk @(install_dir)
        cp elysium_efi.vmdk @(install_dir)
    }
}
