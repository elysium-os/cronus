// Support
source/support {
    url: support
    type: local
}

// Freestanding Toolchain
source/freestanding_binutils {
    url: https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.gz
    b2sum: 5a4c2bc5e4dfcb9902732d8393c58e8b435dbc91db974672a4d2fd6f6c5ae6d7651ccbcb7faf8915bb2405ff11c0788a5994ea717f929b76ca86dbcb567f7029
    type: tar.gz
}

source/freestanding_gcc {
    url: https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz
    b2sum: 749671e29fb8bcd35e5bb9d1f8a5a4b815d1764c48f996ce406ef198731962d58b86d69db7b04a75a4ebcaf5d9f80d0715fe6b14139a60da5b4d2445388efa58
    type: tar.gz
    patch: freestanding-gcc.diff
}

host/freestanding_binutils {
    source: freestanding_binutils
    dependencies [ image/gcc image/binutils ]
    configure {
        CFLAGS="-O2 -pipe" CXXFLAGS="-O2 -pipe" \
        @(source_dir)/configure \
            --target=x86_64-elf \
            --prefix=@(prefix) \
            --with-sysroot \
            --disable-nls \
            --disable-werror
    }
    build { make -j@(thread_count) all }
    install { DESTDIR=@(install_dir) make install }
}

host/freestanding_gcc {
    source: freestanding_gcc
    dependencies [ *host/freestanding_binutils image/gcc *image/libisl *image/libmpc ]
    configure {
        CFLAGS="-O2 -pipe" CXXFLAGS="-O2 -pipe" \
        @(source_dir)/configure \
            --target=x86_64-elf \
            --prefix=@(prefix) \
            --disable-nls \
            --enable-languages=c \
            --without-headers
    }
    build {
        make -j@(thread_count) all-gcc
        make -j@(thread_count) all-target-libgcc
    }
    install {
        DESTDIR=@(install_dir) make install-gcc
        DESTDIR=@(install_dir) make install-target-libgcc
    }
}


// mkimg
source/mkimg {
    url: https://git.thenest.dev/wux/mkimg/-/archive/main/mkimg-main.tar.gz
    b2sum: f6b2eafa35b329323179fecce635cf37b190a5990974bca545c70a9624d6ed181e9df6209f264bcb059002a7d252cf2e54eaaea3144bbcaad1a6b254a50f621b
    type: tar.gz
}

host/mkimg {
    source: mkimg
    dependencies [ image/go ]
    configure { cp @(source_dir)/go.mod @(source_dir)/go.sum @(source_dir)/main.go . }
    build { go build }
    install {
        mkdir -p @(install_dir)@(prefix)/bin
        cp mkimg @(install_dir)@(prefix)/bin
    }
}

// Tartarus (Bootloader)
source/tartarus {
    url: https://git.thenest.dev/wux/tartarus-bootloader/-/archive/928c02398c2437495bcca5cebcacbba091a40414/tartarus-bootloader-928c02398c2437495bcca5cebcacbba091a40414.tar.gz
    b2sum: cbff71b461cc066dd0e7a06bc1e1860ff262eea9308d9e092da84bf7d76580db5dc22d01ae172dc50b82f9c2141fceb24449b14e27b64fe5f292f9b1513e12f9
    type: tar.gz
}

source/vendor_libgcc {
    url: https://github.com/osdev0/libgcc-binaries/archive/refs/heads/trunk.tar.gz
    b2sum: badf839396a04781c1d5d3d92daf43664675cc4a00aa68775706856e6e731759c8bdfb749bffe41ccc0c75c9a8c2cd69be922ef7bb88aff1fbd0d55cb6bf1455
    type: tar.gz
}

source/vendor_nyu-efi {
    url: https://github.com/osdev0/nyu-efi/archive/eede601b8a9134cb4b6de96d2c430e2424c1390c.tar.gz
    b2sum: 26b841f4af5c0404a7a9976f7f42870ac3ef695e1c77da8f555feee93fe9f5be3cebd3d1f6cf2d5bef9ba198e41cfbc7883f2e23b4ec09b7165adf8c15b6b821
    type: tar.gz
}

target/tartarus {
    source: tartarus
    dependencies [ source/vendor_libgcc host/freestanding_gcc image/nasm image/git ]
    configure {
        @(source_dir)/conf.sh \
            --prefix=@(prefix) \
            --platform=x86_64-bios \
            --toolchain-triplet=x86_64-elf \
            --vendor-libgcc=@(sources_dir)/vendor_libgcc
    }
    build { make -j@(thread_count) all }
    install { DESTDIR=@(install_dir) make install }
}

target/tartarus_efi {
    source: tartarus
    dependencies [ source/vendor_libgcc source/vendor_nyu-efi host/freestanding_gcc image/nasm image/git ]
    configure {
        @(source_dir)/conf.sh \
            --prefix=@(prefix) \
            --platform=x86_64-uefi \
            --toolchain-triplet=x86_64-elf \
            --vendor-libgcc=@(sources_dir)/vendor_libgcc \
            --vendor-efi=@(sources_dir)/vendor_nyu-efi
    }
    build { make -j@(thread_count) all }
    install { DESTDIR=@(install_dir) make install }
}

// uACPI
source/uacpi {
    url: https://github.com/UltraOS/uACPI/archive/1bd2930030ef819519de32dd1f7a8f999440308f.tar.gz
    b2sum: 0c972ce71ba510dfa2f443492cf8fcada9bb0c1bddf97d113536939243184b94543dab86b47dafac5cb7bac73a2a9d18ead3a6c9bf4f09876eea36670e90216c
    type: tar.gz
}

target/uacpi {
    source: uacpi
    dependencies [ host/freestanding_gcc ]
    build {
        x86_64-elf-gcc \
            -ffreestanding \
            -mcmodel=kernel \
            -mno-red-zone \
            -mgeneral-regs-only \
            -O3 \
            -DUACPI_NATIVE_ALLOC_ZEROED -DUACPI_FORMATTED_LOGGING \
            -I@(source_dir)/include \
            -c $(find @(source_dir)/source -type f -name "*.c")
        x86_64-elf-ar cr uacpi.a $(find . -type f -name "*.o")
    }
    install {
        mkdir -p @(install_dir)@(prefix)/share
        mkdir -p @(install_dir)@(prefix)/include
        cp uacpi.a @(install_dir)@(prefix)/share
        cp -r @(source_dir)/include/* @(install_dir)@(prefix)/include
    }
}

// Kernel
source/kernel {
    url: kernel
    type: local
}

target/kernel {
    source: kernel
    dependencies [ host/freestanding_gcc target/tartarus target/uacpi ]
    configure {
        @(source_dir)/conf.sh \
            --prefix=@(prefix) \
            --arch=x86_64 \
            --toolchain-triplet=x86_64-elf \
            --sysroot=@(sysroot_dir)
    }
    build { make all }
    install { DESTDIR=@(install_dir) make install }
}

// Image
target/image {
    dependencies [ host/mkimg source/support target/tartarus target/tartarus_efi target/kernel image/qemu-img ]
    build {
        cp @(sysroot_dir)@(prefix)/share/tartarus/tartarus.sys .
        cp @(sysroot_dir)@(prefix)/share/tartarus/x86_64-bios.bin .

        mkdir -p ./image_root
        cp @(sources_dir)/support/tartarus.cfg ./image_root
        cp @(sysroot_dir)@(prefix)/share/kernel.elf ./image_root
        cp @(sysroot_dir)@(prefix)/share/kernel_symbols.txt ./image_root

        mkimg --config=@(sources_dir)/support/mkimg_bios.toml

        mkdir -p ./image_root/EFI/BOOT
        cp @(sysroot_dir)@(prefix)/share/tartarus/tartarus.efi ./image_root/EFI/BOOT/BOOTX64.EFI
        mkimg --config=@(sources_dir)/support/mkimg_efi.toml

        qemu-img convert -O vmdk elysium_efi.img elysium_efi.vmdk
        qemu-img convert -O vmdk elysium_bios.img elysium_bios.vmdk
    }
    install {
        cp elysium_bios.img @(install_dir)
        cp elysium_efi.img @(install_dir)
        cp elysium_bios.vmdk @(install_dir)
        cp elysium_efi.vmdk @(install_dir)
    }
}
